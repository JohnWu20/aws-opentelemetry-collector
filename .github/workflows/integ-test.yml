name: Integ-test

# listen on any branch
on:
  push:
    branches: 
      - master
      - workflow-1

jobs:
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    # Runs a single command using the runners shell
    - name: Build Binaries
      run: make build

    # Archive binaries
    - name: Cache binaries
      uses: actions/cache@v2
      with:
        key: "cached_binaries_${{ github.run_id }}"
        path: build

  package-rpm:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: restore cached binaries
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build
          
      - name: Build RPM
        run: |
          ARCH=x86_64 DEST=build/packages/linux/amd64 tools/packaging/linux/create_rpm.sh
          ARCH=aarch64 DEST=build/packages/linux/arm64 tools/packaging/linux/create_rpm.sh
          
      - name: Cache rpms
        uses: actions/cache@v2
        with:
          key: "cached_rpms_${{ github.run_id }}"
          path: build/packages

  build-image:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v2
      - name: restore cached binaries
        uses: actions/cache@v2
        with:
          key: "cached_binaries_${{ github.run_id }}"
          path: build


  versioning:
    runs-on: ubuntu-latest
    needs: [package-rpm]
    steps: 
      - uses: actions/checkout@v2

      - name: Restore cached rpms
        uses: actions/cache@v2
        with:
          key: "cached_rpms_${{ github.run_id }}"
          path: build/packages

      - name: Versioning for testing
        run: |
          # build a version with github run id so that we can distingush each build for integ-test
          Version="`cat VERSION`-$GITHUB_RUN_ID"
          echo $Version > build/packages/VERSION

      - name: Cache the packages
        uses: actions/cache@v2
        with:
          key: "cached_packages_${{ github.run_id }}"
          path: build/packages

  release-to-test-stack:
    runs-on: ubuntu-latest
    needs: [versioning]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: restore cached rpms
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "cached_packages_${{ github.run_id }}"

      - name: upload-to-s3
        uses: wyTrivail/aocintegtest@master
        with: 
          task: S3Release
          
  ec2test:
    runs-on: ubuntu-latest
    needs: [release-to-test-stack]
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.INTEG_TEST_AWS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.INTEG_TEST_AWS_KEY_SECRET }}
          aws-region: us-west-2

      - name: restore cached rpms
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "cached_packages_${{ github.run_id }}"

      - name: Configure SSH Key
        run: echo "${{ secrets.INTEG_TEST_SSH_KEY }}" > build/packages/sshkey.pem

      - name: perform integration test on EC2
        uses: wyTrivail/aocintegtest@master
        with:
          task: EC2Test

  release-candidate:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' # only create the artifact when there's a push, not for dispatch.
    needs: [ec2test]
    steps:
      - name: restore cached packages
        uses: actions/cache@v2
        with:
          path: build/packages
          key: "cached_packages_${{ github.run_id }}"

      - name: remove the run id from version
        run: |
          Version=`cat build/packages/VERSION | awk -F "-" '{print $1}'`
          echo $Version > build/packages/VERSION
          echo $GITHUB_SHA > build/packages/GITHUB_SHA

      - name: upload packages as an artifact
        uses: actions/upload-artifact@v2
        with:
          name: packages_artifact
          path: build/packages
